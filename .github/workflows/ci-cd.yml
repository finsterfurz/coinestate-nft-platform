name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ================ CODE QUALITY & SECURITY ================
  lint-and-security:
    name: 🔍 Lint & Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🎯 Run ESLint
      run: npm run lint
      
    - name: 💅 Check Prettier formatting
      run: npm run format:check
      
    - name: 🔒 Security audit
      run: npm run security:audit
      
    - name: 📝 TypeScript type check
      run: npm run typecheck

  # ================ TESTING ================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🧪 Run unit tests
      run: npm run test:unit
      
    - name: 🔗 Run integration tests
      run: npm run test:integration
      
    - name: ♿ Run accessibility tests
      run: npm run test:accessibility
      
    - name: 📊 Generate test coverage
      run: npm run test:coverage
      
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ================ BUILD ================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        VITE_ENVIRONMENT: production
        VITE_APP_VERSION: ${{ github.sha }}
        
    - name: 📊 Analyze bundle size
      run: npm run analyze:bundle
      
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # ================ E2E TESTING ================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: 🎭 Run Cypress E2E tests
      run: npm run test:e2e
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        
    - name: 📊 Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots/
        retention-days: 7

  # ================ SECURITY SCANNING ================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ================ STAGING DEPLOYMENT ================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: 🚀 Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        alias-domains: staging.coinestate.io

  # ================ PRODUCTION DEPLOYMENT ================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: 🚀 Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    - name: 📊 Lighthouse Performance Audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://coinestate.io
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: 🏷️ Create Release Tag
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 **Production Deployment**
          
          **Changes in this release:**
          - Automated deployment from commit ${{ github.sha }}
          - All tests passed ✅
          - Security scan completed ✅
          - Performance audit completed ✅
          
          **Deployment Details:**
          - Build: #${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          - Environment: Production
          
          **Links:**
          - 🌐 [Live Application](https://coinestate.io)
          - 📊 [Performance Report](https://lighthouse-ci.com)
          - 🔒 [Security Report](https://github.com/${{ github.repository }}/security)
        draft: false
        prerelease: false

  # ================ NOTIFICATIONS ================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 📢 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 **CoinEstate NFT Platform Deployment**
          
          **Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
          **Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          **Branch:** ${{ github.ref }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          
          ${{ job.status == 'success' && '🎉 Deployment completed successfully!' || '⚠️ Deployment failed. Please check the logs.' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # ================ CLEANUP ================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 🧹 Clean up artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          build-files
          cypress-screenshots
        failOnError: false
